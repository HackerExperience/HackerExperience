#!/usr/bin/env bash

set -euo pipefail

OPENAPI_PATH="../helix/priv/openapi"
ELM_OUTPUT_DIR="src/"

generate_elm_types_for_lobby_api() {
    # NOTE: The empty server argument is on purpose, so the generated Elm
    # functions functions accept a `server` string as an argument.
    npx elm-open-api $OPENAPI_PATH/lobby.json \
        --module-name API.Lobby \
        --output-dir $ELM_OUTPUT_DIR \
        --effect-types task \
        --server '{}'
}

generate_elm_types_for_game_api() {
    npx elm-open-api $OPENAPI_PATH/game.json \
        --module-name API.Game \
        --output-dir $ELM_OUTPUT_DIR \
        --effect-types task \
        --server '{"sp": "http://localhost:4001", "mp": "http://localhost:4002"}'
}

generate_elm_types_for_events_api() {
    npx elm-open-api $OPENAPI_PATH/events.json \
        --module-name API.Events \
        --effect-types task \
        --output-dir $ELM_OUTPUT_DIR
}

generate_elm_types_for_processes_api() {
    npx elm-open-api $OPENAPI_PATH/processes.json \
        --module-name API.Processes \
        --effect-types task \
        --output-dir $ELM_OUTPUT_DIR
}

generate_elm_types_for_logs_api() {
    npx elm-open-api $OPENAPI_PATH/logs.json \
        --module-name API.Logs \
        --effect-types task \
        --output-dir $ELM_OUTPUT_DIR
}

# Always use script dirname as starting point
cd "$(dirname "$0")"

# Generate the OAS files from Helix
(cd ../helix && mix openapi.generate_schemas)

# Generate Elm types for the Lobby API
(cd ../hexOS && generate_elm_types_for_lobby_api)

# Generate Elm types for the Game API
(cd ../hexOS && generate_elm_types_for_game_api)

# Generate Elm types for the Events API
(cd ../hexOS && generate_elm_types_for_events_api)

# Generate Elm types for the Processes API
(cd ../hexOS && generate_elm_types_for_processes_api)

# Generate Elm types for the Logs API
(cd ../hexOS && generate_elm_types_for_logs_api)

# Format the SDK to use custom Elm types (instead of generic OpenAPI types)
(cd ../hexOS && ../bin/format_openapi_spec.exs)
